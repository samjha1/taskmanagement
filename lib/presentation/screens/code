// main.dart
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:get/get.dart';
import 'theme/theme_provider.dart';
import 'screens/home_screen.dart';

void main() {
  runApp(const ProviderScope(child: MyApp()));
}

class MyApp extends ConsumerWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final themeMode = ref.watch(themeProvider);
    
    return GetMaterialApp(
      title: 'Task Manager',
      theme: AppTheme.lightTheme,
      darkTheme: AppTheme.darkTheme,
      themeMode: themeMode,
      home: const HomeScreen(),
    );
  }
}

// lib/theme/theme_provider.dart

// lib/models/task_model.dart
class Task {
  final int? id;
  final String title;
  final String description;
  final DateTime? dueDate;
  final bool isCompleted;
  final String priority;

  Task({
    this.id,
    required this.title,
    required this.description,
    this.dueDate,
    required this.isCompleted,
    required this.priority,
  });

  factory Task.fromJson(Map<String, dynamic> json) {
    return Task(
      id: json['id'],
      title: json['title'],
      description: json['description'],
      dueDate: json['dueDate'] != null ? DateTime.parse(json['dueDate']) : null,
      isCompleted: json['isCompleted'] == 1,
      priority: json['priority'],
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'title': title,
      'description': description,
      'dueDate': dueDate?.toIso8601String(),
      'isCompleted': isCompleted ? 1 : 0,
      'priority': priority,
    };
  }
}

// lib/providers/task_provider.dart
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../models/task_model.dart';

final taskProvider = StateNotifierProvider<TaskNotifier, AsyncValue<List<Task>>>((ref) {
  return TaskNotifier();
});

final filterProvider = StateProvider<String>((ref) => 'all');

class TaskNotifier extends StateNotifier<AsyncValue<List<Task>>> {
  TaskNotifier() : super(const AsyncValue.loading()) {
    loadTasks();
  }

  Future<void> loadTasks() async {
    try {
      // Implement your API call here
      // For now, using dummy data
      state = AsyncValue.data([
        Task(
          id: 1,
          title: 'Sample Task',
          description: 'This is a sample task',
          isCompleted: false,
          priority: 'high',
        ),
      ]);
    } catch (e) {
      state = AsyncValue.error(e, StackTrace.current);
    }
  }
}

// lib/screens/home_screen.dart
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../widgets/task_card.dart';
import '../providers/task_provider.dart';
import '../theme/theme_provider.dart';
import 'add_task_screen.dart';

class HomeScreen extends ConsumerWidget {
  final int? taskId;
  const HomeScreen({Key? key, this.taskId}) : super(key: key);

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final tasksAsyncValue = ref.watch(taskProvider);
    final filter = ref.watch(filterProvider);
    final theme = Theme.of(context);

    return Scaffold(
      backgroundColor: theme.scaffoldBackgroundColor,
      appBar: AppBar(
        title: Text('Task Manager', style: theme.textTheme.titleLarge?.copyWith(
          color: theme.appBarTheme.foregroundColor,
        )),
        actions: [
          IconButton(
            icon: Icon(
              theme.brightness == Brightness.dark
                  ? Icons.light_mode
                  : Icons.dark_mode,
            ),
            onPressed: () => ref.read(themeProvider.notifier).toggleTheme(),
          ),
        ],
      ),
      body: Column(
        children: [
          _buildStatusBar(tasksAsyncValue, theme),
          Expanded(
            child: _buildTaskList(tasksAsyncValue, filter, theme),
          ),
        ],
      ),
      floatingActionButton: FloatingActionButton.extended(
        onPressed: () => Navigator.push(
          context,
          MaterialPageRoute(builder: (context) => const AddTaskScreen()),
        ),
        icon: const Icon(Icons.add),
        label: const Text('Add Task'),
      ),
    );
  }

  Widget _buildStatusBar(AsyncValue<List<Task>> tasksAsyncValue, ThemeData theme) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: theme.cardTheme.color,
        border: Border(
          bottom: BorderSide(
            color: theme.dividerColor,
            width: 1,
          ),
        ),
      ),
      child: tasksAsyncValue.when(
        data: (tasks) => Row(
          mainAxisAlignment: MainAxisAlignment.spaceAround,
          children: [
            _buildStatusItem(
              'Total',
              tasks.length.toString(),
              Icons.assignment,
              Colors.blue,
              theme,
            ),
            _buildStatusItem(
              'Completed',
              tasks.where((t) => t.isCompleted).length.toString(),
              Icons.check_circle,
              Colors.green,
              theme,
            ),
            _buildStatusItem(
              'Pending',
              tasks.where((t) => !t.isCompleted).length.toString(),
              Icons.pending,
              Colors.orange,
              theme,
            ),
          ],
        ),
        loading: () => const Center(child: CircularProgressIndicator()),
        error: (_, __) => Text(
          'Error loading statistics',
          style: theme.textTheme.bodyMedium?.copyWith(color: Colors.red),
        ),
      ),
    );
  }

  Widget _buildStatusItem(
    String label,
    String value,
    IconData icon,
    Color color,
    ThemeData theme,
  ) {
    return Column(
      children: [
        Icon(icon, color: color),
        const SizedBox(height: 4),
        Text(
          value,
          style: theme.textTheme.bodyLarge?.copyWith(fontWeight: FontWeight.bold),
        ),
        Text(
          label,
          style: theme.textTheme.bodyMedium,
        ),
      ],
    );
  }

  Widget _buildTaskList(
    AsyncValue<List<Task>> tasksAsyncValue,
    String filter,
    ThemeData theme,
  ) {
    return tasksAsyncValue.when(
      data: (tasks) {
        final filteredTasks = _getFilteredTasks(tasks, filter);
        return filteredTasks.isEmpty
            ? _buildEmptyState(theme)
            : ListView.builder(
                padding: const EdgeInsets.all(16),
                itemCount: filteredTasks.length,
                itemBuilder: (context, index) => TaskCard(
                  task: filteredTasks[index],
                ),
              );
      },
      loading: () => const Center(child: CircularProgressIndicator()),
      error: (error, _) => _buildErrorState(error.toString(), theme),
    );
  }

  List<Task> _getFilteredTasks(List<Task> tasks, String filter) {
    return switch (filter) {
      'completed' => tasks.where((task) => task.isCompleted).toList(),
      'pending' => tasks.where((task) => !task.isCompleted).toList(),
      'priority' => tasks.where((task) => task.priority == 'high').toList(),
      _ => tasks,
    };
  }

  Widget _buildEmptyState(ThemeData theme) {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(
            Icons.assignment_outlined,
            size: 64,
            color: theme.brightness == Brightness.dark
                ? Colors.white38
                : Colors.black38,
          ),
          const SizedBox(height: 16),
          Text(
            'No tasks found',
            style: theme.textTheme.titleLarge,
          ),
          const SizedBox(height: 8),
          Text(
            'Add a new task to get started',
            style: theme.textTheme.bodyMedium,
          ),
        ],
      ),
    );
  }

  Widget _buildErrorState(String error, ThemeData theme) {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          const Icon(
            Icons.error_outline,
            color: Colors.red,
            size: 48,
          ),
          const SizedBox(height: 16),
          Text(
            'Error: $error',
            style: theme.textTheme.bodyLarge?.copyWith(color: Colors.red),
          ),
          const SizedBox(height: 16),
          ElevatedButton(
            onPressed: () {
              // Implement retry logic
            },
            child: const Text('Retry'),
          ),
        ],
      ),
    );
  }
}

// lib/widgets/task_card.dart
import 'package:flutter/material.dart';
import '../models/task_model.dart';
import '../screens/add_task_screen.dart';
import 'package:get/get.dart';
import 'package:http/http.dart' as http;

class TaskCard extends StatelessWidget {
  final Task task;

  const TaskCard({
    Key? key,
    required this.task,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    
    return Card(
      elevation: 2,
      margin: const EdgeInsets.only(bottom: 12),
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(12),
        side: BorderSide(
          color: _getPriorityColor().withOpacity(0.3),
          width: 1,
        ),
      ),
      child: InkWell(
        onTap: () => _showTaskDetails(context),
        borderRadius: BorderRadius.circular(12),
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Row(
                children: [
                  _buildPriorityIndicator(),
                  const SizedBox(width: 8),
                  Expanded(
                    child: Text(
                      task.title,
                      style: theme.textTheme.bodyLarge?.copyWith(
                        decoration: task.isCompleted ? TextDecoration.lineThrough : null,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ),
                  _buildStatusIcon(theme),
                ],
              ),
              const SizedBox(height: 8),
              Text(
                task.description,
                style: theme.textTheme.bodyMedium,
                maxLines: 2,
                overflow: TextOverflow.ellipsis,
              ),
              const SizedBox(height: 12),
              _buildFooter(context, theme),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildPriorityIndicator() {
    return Container(
      width: 4,
      height: 24,
      decoration: BoxDecoration(
        color: _getPriorityColor(),
        borderRadius: BorderRadius.circular(2),
      ),
    );
  }

  Widget _buildStatusIcon(ThemeData theme) {
    final backgroundColor = theme.brightness == Brightness.dark
        ? Colors.grey[800]
        : Colors.grey[50];
    
    return Container(
      padding: const EdgeInsets.all(4),
      decoration: BoxDecoration(
        color: backgroundColor,
        borderRadius: BorderRadius.circular(4),
      ),
      child: Icon(
        task.isCompleted ? Icons.check_circle
        // Continuing from the TaskCard class...

  Widget _buildStatusIcon(ThemeData theme) {
    final backgroundColor = theme.brightness == Brightness.dark
        ? Colors.grey[800]
        : Colors.grey[50];
    
    return Container(
      padding: const EdgeInsets.all(4),
      decoration: BoxDecoration(
        color: backgroundColor,
        borderRadius: BorderRadius.circular(4),
      ),
      child: Icon(
        task.isCompleted ? Icons.check_circle : Icons.pending,
        size: 20,
        color: task.isCompleted ? Colors.green : Colors.grey,
      ),
    );
  }

  Widget _buildFooter(BuildContext context, ThemeData theme) {
    return Row(
      children: [
        if (task.dueDate != null) ...[
          Icon(
            Icons.calendar_today,
            size: 16,
            color: theme.brightness == Brightness.dark
                ? Colors.white70
                : Colors.grey[600],
          ),
          const SizedBox(width: 4),
          Text(
            _formatDate(task.dueDate!),
            style: theme.textTheme.bodyMedium,
          ),
          const Spacer(),
        ],
        _buildActionButton(
          context: context,
          icon: Icons.edit,
          label: 'Edit',
          onTap: () => Navigator.push(
            context,
            MaterialPageRoute(
              builder: (context) => AddTaskScreen(taskId: task.id),
            ),
          ),
          theme: theme,
        ),
        const SizedBox(width: 8),
        _buildActionButton(
          context: context,
          icon: Icons.delete,
          label: 'Delete',
          onTap: () => _showDeleteConfirmation(context),
          isDestructive: true,
          theme: theme,
        ),
      ],
    );
  }

  Widget _buildActionButton({
    required BuildContext context,
    required IconData icon,
    required String label,
    required VoidCallback onTap,
    bool isDestructive = false,
    required ThemeData theme,
  }) {
    final color = isDestructive
        ? Colors.red[400]
        : (theme.brightness == Brightness.dark
            ? Colors.white70
            : Colors.grey[600]);

    return InkWell(
      onTap: onTap,
      borderRadius: BorderRadius.circular(4),
      child: Padding(
        padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
        child: Row(
          children: [
            Icon(icon, size: 16, color: color),
            const SizedBox(width: 4),
            Text(
              label,
              style: theme.textTheme.bodyMedium?.copyWith(color: color),
            ),
          ],
        ),
      ),
    );
  }

  Color _getPriorityColor() {
    return switch (task.priority) {
      'high' => Colors.red[400]!,
      'medium' => Colors.orange[400]!,
      _ => Colors.green[400]!,
    };
  }

  String _formatDate(DateTime date) {
    return '${date.day}/${date.month}/${date.year}';
  }

  void _showTaskDetails(BuildContext context) {
    showModalBottomSheet(
      context: context,
      shape: const RoundedRectangleBorder(
        borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
      ),
      builder: (context) => TaskDetailsSheet(task: task),
    );
  }

  void _showDeleteConfirmation(BuildContext context) {
    Get.defaultDialog(
      title: "Delete Task",
      middleText: "Are you sure you want to delete this task?",
      textConfirm: "Yes",
      textCancel: "No",
      confirmTextColor: Colors.white,
      onConfirm: () {
        _deleteTask();
        Get.back();
      },
    );
  }

  Future<void> _deleteTask() async {
    if (task.id == null) {
      Get.snackbar("Error", "Task ID is missing");
      return;
    }

    final url = Uri.parse(
        'https://api.indataai.in/wereads/taskdelete.php?id=${task.id}');

    try {
      final response = await http.delete(url);
      if (response.statusCode == 200) {
        Get.snackbar("Success", "Task deleted successfully",
            snackPosition: SnackPosition.BOTTOM);
      } else {
        Get.snackbar("Error", "Failed to delete task: ${response.body}",
            snackPosition: SnackPosition.BOTTOM);
      }
    } catch (e) {
      Get.snackbar("Error", "Failed to delete task: $e",
          snackPosition: SnackPosition.BOTTOM);
    }
  }
}

// lib/widgets/task_details_sheet.dart
class TaskDetailsSheet extends StatelessWidget {
  final Task task;

  const TaskDetailsSheet({
    Key? key,
    required this.task,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);

    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: theme.scaffoldBackgroundColor,
        borderRadius: const BorderRadius.vertical(top: Radius.circular(20)),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        mainAxisSize: MainAxisSize.min,
        children: [
          Row(
            children: [
              Expanded(
                child: Text(
                  task.title,
                  style: theme.textTheme.titleLarge,
                ),
              ),
              Container(
                padding: const EdgeInsets.symmetric(
                  horizontal: 8,
                  vertical: 4,
                ),
                decoration: BoxDecoration(
                  color: _getPriorityColor(),
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Text(
                  task.priority.toUpperCase(),
                  style: theme.textTheme.bodySmall?.copyWith(
                    color: Colors.white,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
            ],
          ),
          const SizedBox(height: 16),
          Text(
            'Description',
            style: theme.textTheme.titleMedium,
          ),
          const SizedBox(height: 8),
          Text(
            task.description,
            style: theme.textTheme.bodyMedium,
          ),
          if (task.dueDate != null) ...[
            const SizedBox(height: 16),
            Row(
              children: [
                Icon(
                  Icons.calendar_today,
                  size: 16,
                  color: theme.brightness == Brightness.dark
                      ? Colors.white70
                      : Colors.grey[600],
                ),
                const SizedBox(width: 8),
                Text(
                  'Due Date: ${_formatDate(task.dueDate!)}',
                  style: theme.textTheme.bodyMedium,
                ),
              ],
            ),
          ],
          const SizedBox(height: 24),
          Row(
            mainAxisAlignment: MainAxisAlignment.end,
            children: [
              TextButton(
                onPressed: () => Navigator.pop(context),
                child: const Text('Close'),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Color _getPriorityColor() {
    return switch (task.priority) {
      'high' => Colors.red[400]!,
      'medium' => Colors.orange[400]!,
      _ => Colors.green[400]!,
    };
  }

  String _formatDate(DateTime date) {
    return '${date.day}/${date.month}/${date.year}';
  }
}

// lib/screens/add_task_screen.dart
class AddTaskScreen extends ConsumerStatefulWidget {
  final int? taskId;

  const AddTaskScreen({Key? key, this.taskId}) : super(key: key);

  @override
  AddTaskScreenState createState() => AddTaskScreenState();
}

class AddTaskScreenState extends ConsumerState<AddTaskScreen> {
  final _formKey = GlobalKey<FormState>();
  late TextEditingController _titleController;
  late TextEditingController _descriptionController;
  DateTime? _selectedDate;
  String _priority = 'medium';

  @override
  void initState() {
    super.initState();
    _titleController = TextEditingController();
    _descriptionController = TextEditingController();
    if (widget.taskId != null) {
      // Load task data if editing
      _loadTaskData();
    }
  }

  Future<void> _loadTaskData() async {
    // Implement task loading logic
  }

  @override
  void dispose() {
    _titleController.dispose();
    _descriptionController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);

    return Scaffold(
      appBar: AppBar(
        title: Text(
          widget.taskId == null ? 'Add Task' : 'Edit Task',
          style: theme.textTheme.titleLarge?.copyWith(
            color: theme.appBarTheme.foregroundColor,
          ),
        ),
      ),
      body: Form(
        key: _formKey,
        child: ListView(
          padding: const EdgeInsets.all(16),
          children: [
            TextFormField(
              controller: _titleController,
              decoration: const InputDecoration(
                labelText: 'Title',
                border: OutlineInputBorder(),
              ),
              validator: (value) {
                if (value == null || value.isEmpty) {
                  return 'Please enter a title';
                }
                return null;
              },
            ),
            const SizedBox(height: 16),
            TextFormField(
              controller: _descriptionController,
              decoration: const InputDecoration(
                labelText: 'Description',
                border: OutlineInputBorder(),
              ),
              maxLines: 3,
              validator: (value) {
                if (value == null || value.isEmpty) {
                  return 'Please enter a description';
                }
                return null;
              },
            ),
            const SizedBox(height: 16),
            _buildDatePicker(theme),
            const SizedBox(height: 16),
            _buildPrioritySelector(theme),
            const SizedBox(height: 24),
            ElevatedButton(
              onPressed: _submitForm,
              style: ElevatedButton.styleFrom(
                padding: const EdgeInsets.symmetric(vertical: 16),
              ),
              child: Text(
                widget.taskId == null ? 'Add Task' : 'Update Task',
                style: theme.textTheme.titleMedium?.copyWith(
                  color: Colors.white,
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildDatePicker(ThemeData theme) {
    return InkWell(
      onTap: () async {
        final picked = await showDatePicker(
          context: context,
          initialDate: _selectedDate ?? DateTime.now(),
          firstDate: DateTime.now(),
          lastDate: DateTime.now().add(const Duration(days: 365)),
        );
        if (picked != null) {
          setState(() => _selectedDate = picked);
        }
      },
      child: InputDecorator(
        decoration: const InputDecoration(
          labelText: 'Due Date',
          border: OutlineInputBorder(),
        ),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            Text(
              _selectedDate == null
                  ? 'Select Date'
                  : _formatDate(_selectedDate!),
              style: theme.textTheme.bodyMedium,
            ),
            Icon(
              Icons.calendar_today,
              size: 20,
              color: theme.brightness == Brightness.dark
                  ? Colors.white70
                  : Colors.grey[600],
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildPrioritySelector(ThemeData theme) {
    return InputDecorator(
      decoration: const InputDecoration(
        labelText: 'Priority',
        border: OutlineInputBorder(),
      ),
      child: DropdownButtonHideUnderline(
        child: DropdownButton<String>(
          value: _priority,
          isDense: true,
          isExpanded: true,
          items: [
            _buildPriorityItem('low', 'Low', Colors.green[400]!, theme),
            _buildPriorityItem('medium', 'Medium', Colors.orange[400]!, theme),
            _buildPriorityItem('high', 'High', Colors.red[400]!, theme),
          ],
          onChanged: (value) {
            if (value != null) {
              setState(() => _priority = value);
            }
          },
        ),
      ),
    );
  }

  DropdownMenuItem<String> _buildPriorityItem(
    String value,
    String label,
    Color color,
    ThemeData theme,
  ) {
    return DropdownMenuItem(
      value: value,
      child: Row(
        children: [
          Container(
            width: 12,
            height: 12,
            decoration: BoxDecoration(
              color: color,
              shape: BoxShape.circle,
            ),
          ),
          const SizedBox(width: 8),
          Text(
            label,
            style: theme.textTheme.bodyMedium,
          ),
        ],
      ),
    );
  }

  Future<void> _submitForm() async {
    if (!_formKey.currentState!.validate()) {
      return;
    }

    final task = Task(
      id: widget.taskId,
      title: _titleController.text,
      description: _descriptionController.text,
      dueDate: _selectedDate,
      isCompleted: false,
      priority: _priority,
    );

    try {
      // Implement save/update logic
      Navigator.pop(context);
      Get.snackbar(
        "Success",
        widget.taskId == null
            ? "Task added successfully"
            : "Task updated successfully",
        snackPosition: SnackPosition.BOTTOM,
      );
    } catch (e) {
      Get.snackbar(
        "Error",
        "Failed to ${widget.taskId == null ? 'add' : 'update'} task: $e",
        snackPosition: SnackPosition.BOTTOM,
      );
    }
  }

  String _formatDate(DateTime date) {
    return '${date.day}/${date.month}/${date.year}';
  }
}